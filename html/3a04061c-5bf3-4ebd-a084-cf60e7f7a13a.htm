<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Welcome to Sequences</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Welcome" /><meta name="Microsoft.Help.Id" content="3a04061c-5bf3-4ebd-a084-cf60e7f7a13a" /><meta name="Description" content="Sequences is a port of Scala's Stream[+A]http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream to C#." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()"><div class="VS2013_outerDiv"><div class="VS2013_outerContent"><table class="TitleTable"><tr><td class="VS2013_tdLogoColumn"><img src="../icons/Help.png" /></td><td class="VS2013_tdTitleColumn">Welcome to Sequences</td><td class="VS2013_tdRunningTitleColumn">A Sandcastle Documented Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>Sequences is a port of Scala's <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream" target="_blank">Stream[+A]</a> to C#.</p></div><div class="VS2013_CollapsibleAreaRegion"><span class="VS2013_RegionTitle" onclick="ExpandCollapse('ID1RB')" onkeypress="ExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="CollapseToggle" src="../icons/Expanded.png" />Intro</span></div><div id="ID1RBSection" class="VS2013_CollapsibleSection"><p>
          A <a href="e5d6f711-0d01-b800-dec0-b5fc645505db.htm">Sequence<span id="ID0ECFIACAAABAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECFIACAAABAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAFIACAAABAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAFIACAAABAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a> is an immutable lazy list whose elements are only evaluated when they are needed.
          A sequence is composed by a <em>head</em> (the first element) and a lazily-evaluated <em>tail</em> (the remaining elements).
        </p><p>
          The fact that the tail is lazily-evaluated, makes it easy to represent infinite series or sets. For example, here's how to represent the set of all natural numbers.
        </p><div id="ID0EGACAAABAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EGACAAABAA_tabs"><div id="ID0EGACAAABAA_tab1" class="codeSnippetContainerTabSingle" EnableCopyCode="true"><a xmlns="">Natural numbers</a></div></div><div id="ID0EGACAAABAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EGACAAABAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EGACAAABAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EGACAAABAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EGACAAABAA','4')" title="Print">Print</a></div></div><div id="ID0EGACAAABAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">public</span> ISequence&lt;<span class="highlight-keyword">int</span>&gt; Naturals(<span class="highlight-keyword">int</span> start)
{
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> Sequence&lt;<span class="highlight-keyword">int</span>&gt;( head: start,
                              tail: () =&gt; Naturals(start + <span class="highlight-number">1</span>));
}

<span class="highlight-keyword">var</span> naturals = Naturals(<span class="highlight-number">1</span>);

<span class="highlight-comment">//take the first 5 natural numbers</span>
naturals.Take(<span class="highlight-number">5</span>).ForEach(Console.Write); <span class="highlight-comment">//prints 12345</span></pre></div><div id="ID0EGACAAABAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>public ISequence&lt;int&gt; Naturals(int start)
{
    return new Sequence&lt;int&gt;( head: start,
                              tail: () =&gt; Naturals(start + 1));
}

var naturals = Naturals(1);

//take the first 5 natural numbers
naturals.Take(5).ForEach(Console.Write); //prints 12345</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EGACAAABAA');</script><p>
          Or, even simpler:
        </p><div id="ID0EEACAAABAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EEACAAABAA_tabs"><div id="ID0EEACAAABAA_tab1" class="codeSnippetContainerTabSingle" EnableCopyCode="true"><a xmlns="">Natural numbers</a></div></div><div id="ID0EEACAAABAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EEACAAABAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EEACAAABAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EEACAAABAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EEACAAABAA','4')" title="Print">Print</a></div></div><div id="ID0EEACAAABAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">var</span> naturals = Sequence.From(<span class="highlight-number">1</span>);</pre></div><div id="ID0EEACAAABAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>var naturals = Sequence.From(1);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EEACAAABAA');</script><p>
        Sequences also features memoization, i.e., the sequence stores previously computed values to avoid re-evaluation.
        </p><div id="ID0ECACAAABAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0ECACAAABAA_tabs"><div id="ID0ECACAAABAA_tab1" class="codeSnippetContainerTabSingle" EnableCopyCode="true"><a xmlns="">Memoizing odd numbers</a></div></div><div id="ID0ECACAAABAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECACAAABAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0ECACAAABAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECACAAABAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0ECACAAABAA','4')" title="Print">Print</a></div></div><div id="ID0ECACAAABAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">//start with number 1, and then keep adding 2 to the previous number</span> 
<span class="highlight-keyword">var</span> odds = Sequence.Iterate(<span class="highlight-number">1</span>, odd =&gt;
    {
        Console.WriteLine(<span class="highlight-literal">"Adding "</span> + odd + <span class="highlight-literal">" + 2"</span>);
        <span class="highlight-keyword">return</span> odd + <span class="highlight-number">2</span>;
    });

odds.Take(<span class="highlight-number">3</span>).ForEach(Console.WriteLine);
odds.Take(<span class="highlight-number">5</span>).ForEach(Console.WriteLine);

<span class="highlight-comment">//prints</span> 
<span class="highlight-comment">//1</span> 
<span class="highlight-comment">//Adding 1 + 2</span> 
<span class="highlight-comment">//3</span> 
<span class="highlight-comment">//Adding 3 + 2</span> 
<span class="highlight-comment">//5</span> 

<span class="highlight-comment">//and then</span> 
<span class="highlight-comment">//1</span> 
<span class="highlight-comment">//3</span> 
<span class="highlight-comment">//5</span> 
<span class="highlight-comment">//Adding 5 + 2</span> 
<span class="highlight-comment">//7</span> 
<span class="highlight-comment">//Adding 7 + 2</span> 
<span class="highlight-comment">//9</span></pre></div><div id="ID0ECACAAABAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>//start with number 1, and then keep adding 2 to the previous number 
var odds = Sequence.Iterate(1, odd =&gt;
    {
        Console.WriteLine("Adding " + odd + " + 2");
        return odd + 2;
    });

odds.Take(3).ForEach(Console.WriteLine);
odds.Take(5).ForEach(Console.WriteLine);

//prints 
//1 
//Adding 1 + 2 
//3 
//Adding 3 + 2 
//5 

//and then 
//1 
//3 
//5 
//Adding 5 + 2 
//7 
//Adding 7 + 2 
//9</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECACAAABAA');</script><p>
          You can iterate through an infinite sequence for as long as you want.
          As long as you don't hold onto its head, each sequence will be elected for garbage collection as soon as you move to the next value.
          This prevents an infinite sequence from occupying a large and growing ammount of memory.
        </p><div id="ID0EAACAAABAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EAACAAABAA_tabs"><div id="ID0EAACAAABAA_tab1" class="codeSnippetContainerTabSingle" EnableCopyCode="true"><a xmlns="">Continuous garbage collection</a></div></div><div id="ID0EAACAAABAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACAAABAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAACAAABAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAACAAABAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAACAAABAA','4')" title="Print">Print</a></div></div><div id="ID0EAACAAABAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> odd <span class="highlight-keyword">in</span> Sequence.Iterate(<span class="highlight-number">1</span>, odd =&gt; odd + <span class="highlight-number">2</span>))
{
    <span class="highlight-comment">//when you move to Sequence(11, ?),</span> 
    <span class="highlight-comment">//the previous Sequence(9, ?) is elected for collection.</span>
}</pre></div><div id="ID0EAACAAABAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>foreach (var odd in Sequence.Iterate(1, odd =&gt; odd + 2))
{
    //when you move to Sequence(11, ?), 
    //the previous Sequence(9, ?) is elected for collection.
}</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAACAAABAA');</script></div><a name="seeAlsoSection"></a><div class="VS2013_CollapsibleAreaRegion"><span class="VS2013_RegionTitle" onclick="ExpandCollapse('ID2RB')" onkeypress="ExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="CollapseToggle" src="../icons/Expanded.png" />See Also</span></div><div id="ID2RBSection" class="VS2013_CollapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="3b6a3c7e-a6e5-eec8-e046-c3f2320ef836.htm">ISequence<span id="ID0ECAEAAAAABAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECAEAAAAABAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAAEAAAAABAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAAEAAAAABAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></div><div class="seeAlsoStyle"><a href="724d51e6-91d7-5334-ae31-0e918f93f065.htm">Sequence</a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="d926337d-29d9-4fba-96a3-080e2a7f31e2.htm">Examples</a></div><div class="seeAlsoStyle"><a href="f9e21197-e60e-4af1-9c38-c4ed4498ac04.htm">Version History</a></div></div></div></div></div></div><div id="VS2013_footer" class="VS2013_footer"><div class="VS2013_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:diogo.filipe.acastro%40gmail.com?Subject=A Sandcastle Documented Class Library">diogo.filipe.acastro@gmail.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>